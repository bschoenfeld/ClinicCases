<?php
/**
 * CustomFieldValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PracticePanther KISS Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomFieldValue Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CustomFieldValue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomFieldValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_field_ref' => '\Swagger\Client\Model\CustomFieldRef',
        'value_boolean' => 'bool',
        'contact_ref' => '\Swagger\Client\Model\ContactReference',
        'value_date_time' => '\DateTime',
        'value_number' => 'double',
        'value_string' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_field_ref' => null,
        'value_boolean' => null,
        'contact_ref' => null,
        'value_date_time' => 'date-time',
        'value_number' => 'double',
        'value_string' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_field_ref' => 'custom_field_ref',
        'value_boolean' => 'value_boolean',
        'contact_ref' => 'contact_ref',
        'value_date_time' => 'value_date_time',
        'value_number' => 'value_number',
        'value_string' => 'value_string'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_field_ref' => 'setCustomFieldRef',
        'value_boolean' => 'setValueBoolean',
        'contact_ref' => 'setContactRef',
        'value_date_time' => 'setValueDateTime',
        'value_number' => 'setValueNumber',
        'value_string' => 'setValueString'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_field_ref' => 'getCustomFieldRef',
        'value_boolean' => 'getValueBoolean',
        'contact_ref' => 'getContactRef',
        'value_date_time' => 'getValueDateTime',
        'value_number' => 'getValueNumber',
        'value_string' => 'getValueString'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_field_ref'] = isset($data['custom_field_ref']) ? $data['custom_field_ref'] : null;
        $this->container['value_boolean'] = isset($data['value_boolean']) ? $data['value_boolean'] : null;
        $this->container['contact_ref'] = isset($data['contact_ref']) ? $data['contact_ref'] : null;
        $this->container['value_date_time'] = isset($data['value_date_time']) ? $data['value_date_time'] : null;
        $this->container['value_number'] = isset($data['value_number']) ? $data['value_number'] : null;
        $this->container['value_string'] = isset($data['value_string']) ? $data['value_string'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['custom_field_ref'] === null) {
            $invalidProperties[] = "'custom_field_ref' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['custom_field_ref'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets custom_field_ref
     *
     * @return \Swagger\Client\Model\CustomFieldRef
     */
    public function getCustomFieldRef()
    {
        return $this->container['custom_field_ref'];
    }

    /**
     * Sets custom_field_ref
     *
     * @param \Swagger\Client\Model\CustomFieldRef $custom_field_ref This is a reference to the custom field we are setting this value for.
     *
     * @return $this
     */
    public function setCustomFieldRef($custom_field_ref)
    {
        $this->container['custom_field_ref'] = $custom_field_ref;

        return $this;
    }

    /**
     * Gets value_boolean
     *
     * @return bool
     */
    public function getValueBoolean()
    {
        return $this->container['value_boolean'];
    }

    /**
     * Sets value_boolean
     *
     * @param bool $value_boolean Used only if CustomField.Type == Checkbox
     *
     * @return $this
     */
    public function setValueBoolean($value_boolean)
    {
        $this->container['value_boolean'] = $value_boolean;

        return $this;
    }

    /**
     * Gets contact_ref
     *
     * @return \Swagger\Client\Model\ContactReference
     */
    public function getContactRef()
    {
        return $this->container['contact_ref'];
    }

    /**
     * Sets contact_ref
     *
     * @param \Swagger\Client\Model\ContactReference $contact_ref Used only if CustomField.Type == Contact
     *
     * @return $this
     */
    public function setContactRef($contact_ref)
    {
        $this->container['contact_ref'] = $contact_ref;

        return $this;
    }

    /**
     * Gets value_date_time
     *
     * @return \DateTime
     */
    public function getValueDateTime()
    {
        return $this->container['value_date_time'];
    }

    /**
     * Sets value_date_time
     *
     * @param \DateTime $value_date_time Used only if CustomField.Type == Date || CustomField.Type == DateTime
     *
     * @return $this
     */
    public function setValueDateTime($value_date_time)
    {
        $this->container['value_date_time'] = $value_date_time;

        return $this;
    }

    /**
     * Gets value_number
     *
     * @return double
     */
    public function getValueNumber()
    {
        return $this->container['value_number'];
    }

    /**
     * Sets value_number
     *
     * @param double $value_number Used only if CustomField.Type == Number || CustomField.Type == Currency
     *
     * @return $this
     */
    public function setValueNumber($value_number)
    {
        $this->container['value_number'] = $value_number;

        return $this;
    }

    /**
     * Gets value_string
     *
     * @return string
     */
    public function getValueString()
    {
        return $this->container['value_string'];
    }

    /**
     * Sets value_string
     *
     * @param string $value_string Used only if CustomField.Type == TextEditor || CustomField.Type == DropDownList
     *
     * @return $this
     */
    public function setValueString($value_string)
    {
        $this->container['value_string'] = $value_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

