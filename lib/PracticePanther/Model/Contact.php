<?php
/**
 * Contact
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PracticePanther KISS Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Contact Class Doc Comment
 *
 * @category Class
 * @description Represents a contact. Each account can have multiple contacts. One of them must be the primary contact
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Contact implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Contact';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'account_ref' => '\Swagger\Client\Model\AccountReference',
        'is_primary_contact' => 'bool',
        'display_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'phone_mobile' => 'string',
        'phone_home' => 'string',
        'phone_fax' => 'string',
        'phone_work' => 'string',
        'email' => 'string',
        'notes' => 'string',
        'custom_field_values' => '\Swagger\Client\Model\CustomFieldValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'account_ref' => null,
        'is_primary_contact' => null,
        'display_name' => null,
        'first_name' => null,
        'last_name' => null,
        'phone_mobile' => null,
        'phone_home' => null,
        'phone_fax' => null,
        'phone_work' => null,
        'email' => null,
        'notes' => null,
        'custom_field_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'account_ref' => 'account_ref',
        'is_primary_contact' => 'is_primary_contact',
        'display_name' => 'display_name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'phone_mobile' => 'phone_mobile',
        'phone_home' => 'phone_home',
        'phone_fax' => 'phone_fax',
        'phone_work' => 'phone_work',
        'email' => 'email',
        'notes' => 'notes',
        'custom_field_values' => 'custom_field_values'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'account_ref' => 'setAccountRef',
        'is_primary_contact' => 'setIsPrimaryContact',
        'display_name' => 'setDisplayName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'phone_mobile' => 'setPhoneMobile',
        'phone_home' => 'setPhoneHome',
        'phone_fax' => 'setPhoneFax',
        'phone_work' => 'setPhoneWork',
        'email' => 'setEmail',
        'notes' => 'setNotes',
        'custom_field_values' => 'setCustomFieldValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'account_ref' => 'getAccountRef',
        'is_primary_contact' => 'getIsPrimaryContact',
        'display_name' => 'getDisplayName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'phone_mobile' => 'getPhoneMobile',
        'phone_home' => 'getPhoneHome',
        'phone_fax' => 'getPhoneFax',
        'phone_work' => 'getPhoneWork',
        'email' => 'getEmail',
        'notes' => 'getNotes',
        'custom_field_values' => 'getCustomFieldValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['account_ref'] = isset($data['account_ref']) ? $data['account_ref'] : null;
        $this->container['is_primary_contact'] = isset($data['is_primary_contact']) ? $data['is_primary_contact'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['phone_mobile'] = isset($data['phone_mobile']) ? $data['phone_mobile'] : null;
        $this->container['phone_home'] = isset($data['phone_home']) ? $data['phone_home'] : null;
        $this->container['phone_fax'] = isset($data['phone_fax']) ? $data['phone_fax'] : null;
        $this->container['phone_work'] = isset($data['phone_work']) ? $data['phone_work'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_ref
     *
     * @return \Swagger\Client\Model\AccountReference
     */
    public function getAccountRef()
    {
        return $this->container['account_ref'];
    }

    /**
     * Sets account_ref
     *
     * @param \Swagger\Client\Model\AccountReference $account_ref 
     *
     * @return $this
     */
    public function setAccountRef($account_ref)
    {
        $this->container['account_ref'] = $account_ref;

        return $this;
    }

    /**
     * Gets is_primary_contact
     *
     * @return bool
     */
    public function getIsPrimaryContact()
    {
        return $this->container['is_primary_contact'];
    }

    /**
     * Sets is_primary_contact
     *
     * @param bool $is_primary_contact This will be set to true if this contact is a primary contact for the account This will be set to true if this contact is a primary contact for the account
     *
     * @return $this
     */
    public function setIsPrimaryContact($is_primary_contact)
    {
        $this->container['is_primary_contact'] = $is_primary_contact;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name This is the display name for the contact. It is read-only and set automatically based on the user settings in the UI This is the display name for the contact. It is read-only and set automatically based on the user settings in the UI
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets phone_mobile
     *
     * @return string
     */
    public function getPhoneMobile()
    {
        return $this->container['phone_mobile'];
    }

    /**
     * Sets phone_mobile
     *
     * @param string $phone_mobile This will be used to send text message reminders and notifications to this contact
     *
     * @return $this
     */
    public function setPhoneMobile($phone_mobile)
    {
        $this->container['phone_mobile'] = $phone_mobile;

        return $this;
    }

    /**
     * Gets phone_home
     *
     * @return string
     */
    public function getPhoneHome()
    {
        return $this->container['phone_home'];
    }

    /**
     * Sets phone_home
     *
     * @param string $phone_home phone_home
     *
     * @return $this
     */
    public function setPhoneHome($phone_home)
    {
        $this->container['phone_home'] = $phone_home;

        return $this;
    }

    /**
     * Gets phone_fax
     *
     * @return string
     */
    public function getPhoneFax()
    {
        return $this->container['phone_fax'];
    }

    /**
     * Sets phone_fax
     *
     * @param string $phone_fax phone_fax
     *
     * @return $this
     */
    public function setPhoneFax($phone_fax)
    {
        $this->container['phone_fax'] = $phone_fax;

        return $this;
    }

    /**
     * Gets phone_work
     *
     * @return string
     */
    public function getPhoneWork()
    {
        return $this->container['phone_work'];
    }

    /**
     * Sets phone_work
     *
     * @param string $phone_work phone_work
     *
     * @return $this
     */
    public function setPhoneWork($phone_work)
    {
        $this->container['phone_work'] = $phone_work;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Must be a valid email address
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Can be either plain text or HTML.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Swagger\Client\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Swagger\Client\Model\CustomFieldValue[] $custom_field_values This is a list of custom field values related to this contact
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

