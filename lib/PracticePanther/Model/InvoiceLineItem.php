<?php
/**
 * InvoiceLineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PracticePanther KISS Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceLineItem Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceLineItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quantity' => 'double',
        'rate' => 'double',
        'discount' => 'double',
        'subtotal' => 'double',
        'tax1_name' => 'string',
        'tax1_rate' => 'string',
        'tax1_amount' => 'double',
        'tax2_name' => 'string',
        'tax2_rate' => 'string',
        'tax2_amount' => 'double',
        'total' => 'double',
        'date' => '\DateTime',
        'billed_by' => 'string',
        'item_name' => 'string',
        'item_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quantity' => 'double',
        'rate' => 'double',
        'discount' => 'double',
        'subtotal' => 'double',
        'tax1_name' => null,
        'tax1_rate' => null,
        'tax1_amount' => 'double',
        'tax2_name' => null,
        'tax2_rate' => null,
        'tax2_amount' => 'double',
        'total' => 'double',
        'date' => 'date-time',
        'billed_by' => null,
        'item_name' => null,
        'item_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quantity' => 'quantity',
        'rate' => 'rate',
        'discount' => 'discount',
        'subtotal' => 'subtotal',
        'tax1_name' => 'tax1_name',
        'tax1_rate' => 'tax1_rate',
        'tax1_amount' => 'tax1_amount',
        'tax2_name' => 'tax2_name',
        'tax2_rate' => 'tax2_rate',
        'tax2_amount' => 'tax2_amount',
        'total' => 'total',
        'date' => 'date',
        'billed_by' => 'billed_by',
        'item_name' => 'item_name',
        'item_description' => 'item_description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quantity' => 'setQuantity',
        'rate' => 'setRate',
        'discount' => 'setDiscount',
        'subtotal' => 'setSubtotal',
        'tax1_name' => 'setTax1Name',
        'tax1_rate' => 'setTax1Rate',
        'tax1_amount' => 'setTax1Amount',
        'tax2_name' => 'setTax2Name',
        'tax2_rate' => 'setTax2Rate',
        'tax2_amount' => 'setTax2Amount',
        'total' => 'setTotal',
        'date' => 'setDate',
        'billed_by' => 'setBilledBy',
        'item_name' => 'setItemName',
        'item_description' => 'setItemDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quantity' => 'getQuantity',
        'rate' => 'getRate',
        'discount' => 'getDiscount',
        'subtotal' => 'getSubtotal',
        'tax1_name' => 'getTax1Name',
        'tax1_rate' => 'getTax1Rate',
        'tax1_amount' => 'getTax1Amount',
        'tax2_name' => 'getTax2Name',
        'tax2_rate' => 'getTax2Rate',
        'tax2_amount' => 'getTax2Amount',
        'total' => 'getTotal',
        'date' => 'getDate',
        'billed_by' => 'getBilledBy',
        'item_name' => 'getItemName',
        'item_description' => 'getItemDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['tax1_name'] = isset($data['tax1_name']) ? $data['tax1_name'] : null;
        $this->container['tax1_rate'] = isset($data['tax1_rate']) ? $data['tax1_rate'] : null;
        $this->container['tax1_amount'] = isset($data['tax1_amount']) ? $data['tax1_amount'] : null;
        $this->container['tax2_name'] = isset($data['tax2_name']) ? $data['tax2_name'] : null;
        $this->container['tax2_rate'] = isset($data['tax2_rate']) ? $data['tax2_rate'] : null;
        $this->container['tax2_amount'] = isset($data['tax2_amount']) ? $data['tax2_amount'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['billed_by'] = isset($data['billed_by']) ? $data['billed_by'] : null;
        $this->container['item_name'] = isset($data['item_name']) ? $data['item_name'] : null;
        $this->container['item_description'] = isset($data['item_description']) ? $data['item_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param double $rate rate
     *
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return double
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param double $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax1_name
     *
     * @return string
     */
    public function getTax1Name()
    {
        return $this->container['tax1_name'];
    }

    /**
     * Sets tax1_name
     *
     * @param string $tax1_name tax1_name
     *
     * @return $this
     */
    public function setTax1Name($tax1_name)
    {
        $this->container['tax1_name'] = $tax1_name;

        return $this;
    }

    /**
     * Gets tax1_rate
     *
     * @return string
     */
    public function getTax1Rate()
    {
        return $this->container['tax1_rate'];
    }

    /**
     * Sets tax1_rate
     *
     * @param string $tax1_rate tax1_rate
     *
     * @return $this
     */
    public function setTax1Rate($tax1_rate)
    {
        $this->container['tax1_rate'] = $tax1_rate;

        return $this;
    }

    /**
     * Gets tax1_amount
     *
     * @return double
     */
    public function getTax1Amount()
    {
        return $this->container['tax1_amount'];
    }

    /**
     * Sets tax1_amount
     *
     * @param double $tax1_amount tax1_amount
     *
     * @return $this
     */
    public function setTax1Amount($tax1_amount)
    {
        $this->container['tax1_amount'] = $tax1_amount;

        return $this;
    }

    /**
     * Gets tax2_name
     *
     * @return string
     */
    public function getTax2Name()
    {
        return $this->container['tax2_name'];
    }

    /**
     * Sets tax2_name
     *
     * @param string $tax2_name tax2_name
     *
     * @return $this
     */
    public function setTax2Name($tax2_name)
    {
        $this->container['tax2_name'] = $tax2_name;

        return $this;
    }

    /**
     * Gets tax2_rate
     *
     * @return string
     */
    public function getTax2Rate()
    {
        return $this->container['tax2_rate'];
    }

    /**
     * Sets tax2_rate
     *
     * @param string $tax2_rate tax2_rate
     *
     * @return $this
     */
    public function setTax2Rate($tax2_rate)
    {
        $this->container['tax2_rate'] = $tax2_rate;

        return $this;
    }

    /**
     * Gets tax2_amount
     *
     * @return double
     */
    public function getTax2Amount()
    {
        return $this->container['tax2_amount'];
    }

    /**
     * Sets tax2_amount
     *
     * @param double $tax2_amount tax2_amount
     *
     * @return $this
     */
    public function setTax2Amount($tax2_amount)
    {
        $this->container['tax2_amount'] = $tax2_amount;

        return $this;
    }

    /**
     * Gets total
     *
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param double $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets billed_by
     *
     * @return string
     */
    public function getBilledBy()
    {
        return $this->container['billed_by'];
    }

    /**
     * Sets billed_by
     *
     * @param string $billed_by billed_by
     *
     * @return $this
     */
    public function setBilledBy($billed_by)
    {
        $this->container['billed_by'] = $billed_by;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string $item_name item_name
     *
     * @return $this
     */
    public function setItemName($item_name)
    {
        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets item_description
     *
     * @return string
     */
    public function getItemDescription()
    {
        return $this->container['item_description'];
    }

    /**
     * Sets item_description
     *
     * @param string $item_description item_description
     *
     * @return $this
     */
    public function setItemDescription($item_description)
    {
        $this->container['item_description'] = $item_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

